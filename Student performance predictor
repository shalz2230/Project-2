import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score


data = {
    'study_hours': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'absences':    [8, 6, 5, 5, 3, 2, 1, 1, 0, 0],
    'previous_score': [45, 50, 55, 60, 65, 70, 75, 80, 85, 90],
    'final_score':    [50, 55, 60, 62, 68, 75, 78, 85, 88, 95]
}


df = pd.DataFrame(data)


X = df[['study_hours', 'absences', 'previous_score']]
y = df['final_score']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))


def predict_performance(study_hours, absences, previous_score):
    input_data = np.array([[study_hours, absences, previous_score]])
    predicted_score = model.predict(input_data)[0]
    print(f"\nðŸ“Š Predicted Final Score: {predicted_score:.2f}")


predict_performance(6, 1, 72)   # 6 study hours, 1 absence, 72 previous score


plt.scatter(y_test, y_pred, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r')
plt.xlabel("Actual Final Score")
plt.ylabel("Predicted Final Score")
plt.title("Actual vs Predicted Student Scores")
plt.show()
